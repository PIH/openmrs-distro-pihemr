<?xml version="1.0" encoding="UTF-8"?>
 
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9
                  http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">

    <changeSet id="20130204-true-false-concept-uuids" author="djazayeri">
        <comment>
            Setting the UUIDs for the automatically-generated 'true' and 'false' concepts to match those used by PIH broadly
        </comment>
        <update tableName="concept">
            <column name="uuid" value="3cd6f600-26fe-102b-80cb-0017a47871b2" />
            <where>concept_id = 1</where>
        </update>
        <update tableName="concept">
            <column name="uuid" value="3cd6f86c-26fe-102b-80cb-0017a47871b2" />
            <where>concept_id = 2</where>
        </update>
    </changeSet>

    <changeSet id="20140225-set-obs-datetime-to-encounter-datetime" author="djazayeri">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                select count(*) from global_property where property = 'mirebalais.UHM-1065.setObsDatetimeToEncounterDatetime'
            </sqlCheck>
        </preConditions>
        <comment>
            See UHM-1065.
            In our present information model, all Obs.obsDatetime should be equal to Obs.encounter.encounterDatetime,
            however due to a bug, 2/3 of obs are stored with the wrong datetime (though the vast majority are off by
            less than a day).
            This changeset is written so it gets run only one time, in case in the future we change our information
            model to include obs whose datatime is not equal to the encounter they are in (e.g. a form that captures
            multiple past lab results, each with its own date).
        </comment>
        <sql>
            update obs o, encounter e
            set o.obs_datetime = e.encounter_datetime
            where o.encounter_id = e.encounter_id
              and o.obs_datetime != e.encounter_datetime
        </sql>
    </changeSet>

    <changeSet id="20140408-delete-person-attributes-with-value-false" author="djazayeri">
        <comment>
            See UHM-1230: With UHM-1220 the code fix was made to correctly store phone numbers when entered as blank.
            Prior to that ticket, they were being stored as "false" in the database.
            In all of the environments (including production) there are several instances of them being false as a
            result of this bug. This changeset removes all person_attributes with value = false
        </comment>
        <delete tableName="person_attribute">
            <where>value='false'</where>
        </delete>
    </changeSet>

    <changeSet id="20140429-update-preferred-address" author="mgoodrich">
        <comment>
            See UHM-1283. Make sure no patient has more than one preferred address
            First query finds a list of all person_address_ids for persons that have more than one preferred address.
            The second query does the same, *except* that it only records a single person_address_id for each patient--
            the one with the lowest value.
            Third query updates sets preferred=0 for all person_addresses in the first set but not in the second set.
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS pa1 AS SELECT DISTINCT a.person_address_id AS person_address_id
            FROM person_address AS a, person_address AS b WHERE a.person_id = b.person_id
            AND a.preferred = 1 AND b.preferred = 1
            AND a.person_address_id != b.person_address_id;

            CREATE TEMPORARY TABLE IF NOT EXISTS pa2 AS SELECT MIN(a.person_address_id) AS person_address_id
            FROM person_address AS a, person_address AS b WHERE a.person_id = b.person_id
            AND a.person_address_id != b.person_address_id
            AND a.preferred = 1 AND b.preferred = 1
            GROUP By a.person_id;

            UPDATE person_address SET preferred = 0 WHERE person_address_id IN
            (SELECT person_address_id FROM pa1 WHERE person_address_id NOT IN (SELECT person_address_id FROM pa2));
        </sql>
    </changeSet>

    <!--<changeSet id="20140731-give-all-users-role-to-view-patient-search" author="djazayeri">-->
        <!--<comment>-->
            <!--See UHM-1500: create script to enable Patient Medical Information for all users-->
            <!--We are rolling out a change where to view the patient dashboard, a user will need to-->
            <!--have a new role "Application Role: patientMedicalInformation".  We will use this role-->
            <!--to limit who can view the patient dashboard.  But, to start, we want all existing users-->
            <!--to have this role-->
        <!--</comment>-->
        <!--<sql>-->
            <!--DELETE FROM user_role WHERE role='Application Role: patientMedicalInformation';-->
            <!--INSERT INTO user_role (user_id, role) SELECT user_id, 'Application Role: patientMedicalInformation'-->
            <!--FROM users WHERE retired = 0 AND username !='scheduler' AND username !='daemon' AND username !='pacsintegration';-->
        <!--</sql>-->
    <!--</changeSet>-->

    <changeSet id="20141201-void-duplicate-discharge-encounters-1" author="mgoodrich">
        <comment>
            See UHM-1705. Void any duplicate discharge encounters (note doesn't handle triplicates or greater,etc)
            (There are no obs in transfer encounters, so we don't worry about voiding obs)
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS discharge_encounters_to_void AS select MAX(encounter_id) AS encounter_id FROM encounter
            WHERE encounter_type = (SELECT encounter_type_id FROM encounter_type WHERE uuid = 'b6631959-2105-49dd-b154-e1249e0fbcd7')
            AND voided = 0
            GROUP BY patient_id, visit_id, encounter_type, encounter_datetime, creator, date_created HAVING (count(*)>1);

            UPDATE encounter_provider SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-transfer-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM discharge_encounters_to_void);

            UPDATE encounter SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-transfer-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM discharge_encounters_to_void);
        </sql>
    </changeSet>


    <changeSet id="20141201-void-duplicate-transfer-encounters-1" author="mgoodrich">
        <comment>
            See UHM-1705. Void any duplicate transfer encounters (note doesn't handle triplicates or greater,etc)
            (There are no obs in transfer encounters, so we don't worry about voiding obs)
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS transfer_encounters_to_void AS select MAX(encounter_id) AS encounter_id FROM encounter
            WHERE encounter_type = (SELECT encounter_type_id FROM encounter_type WHERE uuid = '436cfe33-6b81-40ef-a455-f134a9f7e580')
            AND voided = 0
            GROUP BY patient_id, visit_id, encounter_type, encounter_datetime, creator, date_created HAVING (count(*)>1);

            UPDATE encounter_provider SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-discharge-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM transfer_encounters_to_void);

            UPDATE encounter SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-discharge-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM transfer_encounters_to_void);
        </sql>
    </changeSet>

    <changeSet id="20141202-drop-temporary-tables-1" author="mgoodrich">
        <comment>
            See UHM-1705. Clean up after previous two change sets
        </comment>
        <sql>
           DROP TABLE IF EXISTS transfer_encounters_to_void;
           DROP TABLE IF EXISTS discharge_encounters_to_void;
        </sql>
    </changeSet>


    <changeSet id="20150427-migrate-accession-number-to-order-number-1a" author="mgoodrich">
        <comment>
            Copy the accession number of all orders to the new order_number field
        </comment>
        <sql>
            UPDATE `orders` SET order_number = accession_number WHERE accession_number IS NOT NULL;
        </sql>
    </changeSet>

    <changeSet id="20150427-migrate-accession-number-to-order-number-2" author="mgoodrich">
        <comment>
            Set the accession number column to null
        </comment>
        <sql>
            UPDATE `orders` SET accession_number = NULL;
        </sql>
    </changeSet>

    <changeSet id="20150429-create-radiology-seed-global-property" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM global_property WHERE property='order.nextRadiologyOrderNumberSeed';
            </sqlCheck>
        </preConditions>
        <comment>
            Create the radiology order number seed global property
        </comment>
        <insert tableName="global_property">
            <column name="property" value="order.nextRadiologyOrderNumberSeed"/>
            <column name="property_value" value="0"/>
            <column name="description" value="Seed used for generating radiology order numbers"/>
            <column name="uuid" value="decb8a87-4e6a-4810-8cb6-991e15c8d5cd" />
        </insert>
    </changeSet>


    <changeSet id="20150427-initialize-radiology-order-seed-1d" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <not>
                <sqlCheck expectedResult="0">
                    SELECT COUNT(*) FROM orders;
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            Set the radiology order seed based on the current max order number
        </comment>
        <sql>
            SET @seed_value = (select MAX(order_id) + 1 FROM orders);
            UPDATE `global_property` SET property_value = @seed_value WHERE property='order.nextRadiologyOrderNumberSeed';
        </sql>
    </changeSet>

    <changeSet id="20150429-set-expire-date-to-date-activated" author="mgoodrich">
        <comment>
            Hack workaround--we need to set the expire date to the date activated on all radiology orders so that they are never considered "active".
            In the new 1.10 Order API you cannot set a test as "performed", nor can you have two active orders at the time; this changeset subverts that
        </comment>
        <sql>
            UPDATE `orders` SET auto_expire_date = date_activated;
        </sql>
    </changeSet>

    <changeSet id="20150430-migrate-printing-history-to-new-concept" author="mseaton">
        <preConditions onFail="CONTINUE">
            <not>
                <sqlCheck expectedResult="0">
                    select count(*) from obs where concept_id = (select concept_id from concept where uuid = '9d1b04df-ee77-11e4-a257-54ee7513a7ff')
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            The legacy patientregistration module used a concept named "PrintingIDCardStatus" to store observations as
            to whether an id card was successfully scanned after printing, or if printing failed.
            We have decided to migrate away from this concept (which models answers as text-obs and does not have a consistent uuid across our servers),
            in favor of a new coded concept with a consistent uuid.  This changeset handles the data migration necessary for this,
            but only should be enabled/run on a given system once we have transitioned to the new patient registration.
        </comment>
        <customChange class="org.openmrs.module.mirebalais.liquibase.PrintingIDCardStatusChangeSet"/>
    </changeSet>


    <changeSet id="20150911-migrate-patient-identifier-location" author="mgoodrich">
        <comment>
            When we opened CDI and migrated location information, we forget to migrate the location the ZL EMR ID
        </comment>
        <sql>
            UPDATE `patient_identifier` SET location_id = (SELECT location_id FROM location WHERE uuid='24bd1390-5959-11e4-8ed6-0800200c9a66')
            WHERE location_id = (SELECT location_id FROM location WHERE uuid='a084f714-a536-473b-94e6-ec317b152b43')
            AND identifier_type = (SELECT patient_identifier_type_id FROM patient_identifier_type WHERE uuid='a541af1e-105c-40bf-b345-ba1fd6a59b85');
        </sql>
    </changeSet>

    <changeSet id="20150921-migrate-printing-history-to-new-concept" author="mgoodrich">
        <preConditions onFail="CONTINUE">
            <not>
                <sqlCheck expectedResult="0">
                    select count(*) from obs where concept_id = (select concept_id from concept where uuid = '9d1b04df-ee77-11e4-a257-54ee7513a7ff')
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            This is an exact copy of 20150921-migrate-printing-history-to-new-concept as listed above--we need to run again since we rolled back temporarily to the
            the old patient registration

            The legacy patientregistration module used a concept named "PrintingIDCardStatus" to store observations as
            to whether an id card was successfully scanned after printing, or if printing failed.
            We have decided to migrate away from this concept (which models answers as text-obs and does not have a consistent uuid across our servers),
            in favor of a new coded concept with a consistent uuid.  This changeset handles the data migration necessary for this,
            but only should be enabled/run on a given system once we have transitioned to the new patient registration.
        </comment>
        <customChange class="org.openmrs.module.mirebalais.liquibase.PrintingIDCardStatusChangeSet"/>
    </changeSet>

    <changeSet id="20150928-migrate-printing-history-to-new-concept" author="mgoodrich">
        <preConditions onFail="CONTINUE">
            <not>
                <sqlCheck expectedResult="0">
                    select count(*) from obs where concept_id = (select concept_id from concept where uuid = '9d1b04df-ee77-11e4-a257-54ee7513a7ff')
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            This is an exact copy of 20150921-migrate-printing-history-to-new-concept as listed above--we need to run again since we rolled back temporarily to the
            the old patient registration

            The legacy patientregistration module used a concept named "PrintingIDCardStatus" to store observations as
            to whether an id card was successfully scanned after printing, or if printing failed.
            We have decided to migrate away from this concept (which models answers as text-obs and does not have a consistent uuid across our servers),
            in favor of a new coded concept with a consistent uuid.  This changeset handles the data migration necessary for this,
            but only should be enabled/run on a given system once we have transitioned to the new patient registration.
        </comment>
        <customChange class="org.openmrs.module.mirebalais.liquibase.PrintingIDCardStatusChangeSet"/>
    </changeSet>


    <changeSet id="20160708-mh-encounters-have-proper-form" author="mgoodrich">
        <comment>
            Because of a bug, some mental health encounters have form_id=null, see: https://tickets.pih-emr.org/browse/UHM-2524
        </comment>
        <sql>
            UPDATE encounter SET form_id = (SELECT form_id FROM form WHERE encounter_type in (SELECT encounter_type_id FROM encounter_type WHERE uuid='a8584ab8-cc2a-11e5-9956-625662870761'))
            WHERE encounter_type in (SELECT encounter_type_id FROM encounter_type WHERE uuid='a8584ab8-cc2a-11e5-9956-625662870761') AND form_id is NULL;
        </sql>
    </changeSet>

    <changeSet id="20170217-map-pih-and-ciel-concepts" author="cioan" runAlways="true" runOnChange="true">
        <validCheckSum>3:b84aeaf4169f7d86e311db84f5afe0d8</validCheckSum> <!-- old checksum with broken sql script -->
        <validCheckSum>3:66fa79bc2d0078702e57dca3f1601b90</validCheckSum> <!-- new checksum with fixed sql script -->
        <comment>
            UHM-2768, Create concept mapping View at startup
        </comment>
        <sql>
            create or replace view report_mapping as
            select crm.concept_id, crs.name "source", crt.code
            from concept_reference_map crm, concept_reference_term crt, concept_reference_source crs
            where crm.concept_reference_term_id = crt.concept_reference_term_id
            and crt.concept_source_id = crs.concept_source_id
            and crt.retired = 0
            and crs.retired = 0
            and crs.name in ('PIH','CIEL');
        </sql>
    </changeSet>


    <changeSet id="20170717-create-view-for-most-recent-patient-name-and-address" author="mgoodrich">
        <comment>
            UHM-2832: Create view for most recent patient name and address: https://tickets.pih-emr.org/browse/UHM-2832
        </comment>
        <sql>
            create or replace view current_name_address as
            select p.person_id, p.gender,p.birthdate, p.birthdate_estimated, n.given_name, n.family_name, n.middle_name "nick_name",
            a.person_address_id, a.country, a.state_province "department", a.city_village "commune", a.address3 "section_communal", a.address1 "locality", a.address2 "street_landmark"
            from person p
            LEFT OUTER JOIN person_name n ON n.person_name_id = (select person_name_id from person_name n2 where n2.person_id = p.person_id and n2.voided = 0
            order by n2.preferred desc, n2.date_created desc limit 1)
            LEFT OUTER JOIN person_address a ON a.person_address_id = (select person_address_id from person_address a2 where a2.person_id = p.person_id and a2.voided = 0
            order by a2.preferred desc, a2.date_created desc limit 1)
            where p.voided = 0;
        </sql>
    </changeSet>

    <changeSet id="20180223-reword-question-on-NCD-form" author="ddesimone">
        <comment>
            UHM-3267: Reword question on NCD forms: https://tickets.pih-emr.org/browse/UHM-3267
        </comment>
        <sql>
            UPDATE obs
            set value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'NO'),
            comments =
            (select Concat('updated on ',sysdate(), ' for reworded question') from dual)
            where concept_id =
            (select concept_id from report_mapping where source = 'PIH' and code = '10555')
            and value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'TRUE')
            ;

            UPDATE obs
            set value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'YES'),
            comments =
            (select Concat('updated on ',sysdate(), ' for reworded question') from dual)
            where concept_id =
            (select concept_id from report_mapping where source = 'PIH' and code = '10555')
            and value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'FALSE')
            ;
        </sql>
    </changeSet>

    <changeSet id="20180308-truncate-triage-wait-time" author="ddesimone">
        <comment>
            UHM-3288: Review Validation issues that make occur now that API enforces that concepts that don't "allow precise" can't contain decimal
        </comment>
        <sql>
            UPDATE obs SET value_numeric = TRUNCATE(value_numeric,0) WHERE concept_id = (SELECT concept_id FROM concept WHERE uuid='d9a8fc6f-8695-46b8-854f-2c9e818b4568');
        </sql>
    </changeSet>

    <changeSet id="20181024-add-pathology-order-type-2" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from order_type where uuid = '65c912c2-88cf-46c2-83ae-2b03b1f97d3a'</sqlCheck>
        </preConditions>
        <comment>
            Insert order type for test orders; (we also install this via a bundle, but do this here so it is available
            for the migration change set below)
        </comment>
        <insert tableName="order_type">
            <column name="name" value="Pathology Test Order" />
            <column name="description" value="Order type for pathology test orders" />
            <column name="java_class_name" value="org.openmrs.TestOrder" />
            <column name="creator" valueNumeric="1" />
            <column name="date_created" valueDate="2018-10-24" />
            <column name="retired" valueNumeric="0" />
            <column name="uuid" value="65c912c2-88cf-46c2-83ae-2b03b1f97d3a" />
        </insert>
    </changeSet>

    <changeSet id="20181024-migrate-pathology-orders-to-new-pathology-order-type" author="mgoodrich">
        <preConditions onFail="CONTINUE">
            <sqlCheck expectedResult="1">
                select count(*) from order_type where uuid='65c912c2-88cf-46c2-83ae-2b03b1f97d3a'
            </sqlCheck>
        </preConditions>
        <comment>
            Migrates existing orders to the Pathology Order Type; should be run once, before Lab Workflow app is rolled out
            As a hack to preserve humci test data, does not migrate orders without a location
        </comment>
        <sql>
            update orders o, encounter e set o.order_type_id = (select order_type_id from order_type where uuid='65c912c2-88cf-46c2-83ae-2b03b1f97d3a')
                where o.order_type_id = (select order_type_id from order_type where uuid='52a447d3-a64a-11e3-9aeb-50e549534c5e' )
                and e.encounter_id=o.encounter_id
                and e.location_id is not null;
        </sql>

    </changeSet>

    <changeSet id="20181214-delete-duplicate-radio-concept" author="ball">
        <preConditions onFail="CONTINUE">
            <sqlCheck expectedResult="1">
                select count(*) from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
            </sqlCheck>
        </preConditions>
        <comment>
            Remove the radio concept which had a duplicate name on another concept
        </comment>
        <sql>
            delete from concept_answer
             where concept_id IN (select concept_id from concept where uuid = '159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_answer
            where answer_concept IN (select concept_id from concept where uuid = '159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_name where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_name
             where concept_id = (select concept_id from concept where uuid='3cd9874e-26fe-102b-80cb-0017a47871b2')
               and uuid='106464BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB';

            delete from concept_description where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_reference_map where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from obs where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';
        </sql>

    </changeSet>


    <changeSet id="20180304-01" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property where property_value like '%sierra leone%' and property ='layout.address.format';
            </sqlCheck>
        </preConditions>
        <comment>
            One-time deletion of Sierra Leone address hierarchy so we can repopulate it with the correct levels.
            (Precondition is so that it's only run in Sierra Leone)
        </comment>
        <sql>
            set foreign_key_checks = 0;
            delete from address_hierarchy_address_to_entry_map;
            delete from address_hierarchy_entry;
            delete from address_hierarchy_level;
            set foreign_key_checks = 1;
        </sql>

    </changeSet>

    <changeSet id="20191223-program-enroll-mh-patients" author="ball">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                select count(*)
                  from location l, location_tag_map ltm
                 where l.name like '%belladere%'
                   and l.location_id = ltm.location_id
                   and ltm.location_tag_id =
                        (select lt.location_tag_id
                           from location_tag lt
                          where lt.name like 'Login Location')
            </sqlCheck>
        </preConditions>
        <comment>
            On mental health laptops, enroll patients into mental health program
            if they have a Mental Health encounter and not already enrolled.
        </comment>
        <sql>
            insert into patient_program
              (program_id, date_created, uuid,
               patient_id, location_id, creator, date_enrolled)
            select (select p.program_id from program p where p.name like 'Mental Health') as programId,
                   now(), uuid(),
                   e.patient_id, e.location_id, e.creator, min(e.encounter_datetime)
            from encounter e

            inner join encounter_type as et
               on et.name = 'Mental Health Consult'
              and e.encounter_type = et.encounter_type_id

            where e.voided = 0
              and e.patient_id IN
                  (select distinct(active.patient_id) from encounter active
                   where active.encounter_datetime > '2019-01-01 00:00:00'
                     and active.voided = 0
                     and active.encounter_type = et.encounter_type_id)

              and not exists
                (select 1 from patient_program pp
                 where pp.patient_id = e.patient_id
                   and pp.voided = 0
                   and pp.program_id = (select pr.program_id from program pr where pr.name like 'Mental Health'))
            group by e.patient_id;
        </sql>
    </changeSet>

</databaseChangeLog>